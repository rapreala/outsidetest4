generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @unique @default(autoincrement())
  firstName          String
  lastName           String
  email              String              @unique
  username           String              @unique
  password           String
  image              String?
  role               UserRole            @default(NORMAL)
  emailVerified      DateTime?
  sessions           Session[]           @relation("Session_user")
  accounts           Account[]           @relation("Account_user")
  verificationTokens VerificationToken[] // If you want to associate multiple verification tokens with a user
  listings           Listing[]           @relation("Listing_user")
  bookings           Booking[]           @relation("Booking_user")
  likes              Like[]              @relation("Like_user")
  searches           Search[]            @relation("Search_user")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

enum UserRole {
  NORMAL
  ALPHA
}

model Category {
  id        Int       @id @unique @default(autoincrement())
  name      String
  listings  Listing[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Listing {
  id            Int          @id @unique @default(autoincrement())
  name          String
  host          User         @relation("Listing_user", fields: [hostId], references: [id])
  hostId        Int
  images        String[]
  shortCaption  String
  description   String
  price         Decimal
  startDate     DateTime
  endDate       DateTime
  location      String
  coordinates   Coordinates? @relation(fields: [coordinatesId], references: [id])
  likes         Like[]       @relation("Like_listing")
  bookings      Booking[]    @relation("Booking_listing")
  coordinatesId Int?
  categories    Category[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Approved      Boolean
}

model Like {
  id        Int      @id @unique @default(autoincrement())
  user      User     @relation("Like_user", fields: [userId], references: [id])
  userId    Int
  listing   Listing  @relation("Like_listing", fields: [listingId], references: [id])
  listingId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id        Int      @id @unique @default(autoincrement())
  user      User     @relation("Booking_user", fields: [userId], references: [id])
  userId    Int
  listing   Listing  @relation("Booking_listing", fields: [listingId], references: [id])
  listingId Int
  request   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Search {
  id        Int      @id @unique @default(autoincrement())
  keyword   String
  timestamp DateTime @default(now())
  user      User?    @relation("Search_user", fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coordinates {
  id        Int       @id @unique @default(autoincrement())
  name      String
  latitude  Float
  longitude Float
  listingId Int
  listings  Listing[] @relation
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Session {
  id           Int      @id @unique @default(autoincrement())
  sessionToken String   @unique
  userId       Int?
  expires      DateTime
  user         User?    @relation("Session_user", fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id                 Int       @id @unique @default(autoincrement())
  userId             Int?
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User?     @relation("Account_user", fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @unique @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  userId     Int // Assuming each verification token is associated with a user
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
