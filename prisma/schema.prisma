// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String   @id @unique
  firstName String
  lastName  String
  email     String   @unique
  image     String?
  role      UserRole @default(NORMAL)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  listings Listing[] @relation("Listing_user")
  bookings Booking[] @relation("Booking_user")
  likes    Like[]    @relation("Like_user")
  searches Search[]  @relation("Search_user")
}

enum UserRole {
  NORMAL
  ALPHA
}


// Define categories as an enum
enum Category {
  Nightlife
  FineDining
  CultureAndHeritage
  AdventureAndRelaxation
  NatureAndWildlife
  Sports
  ArtAndMusic
}

// Modify the Listing model to include categories
model Listing {
  id                 String       @id @unique
  name               String
  host               User        @relation("Listing_user", fields: [hostId], references: [id])
  hostId            String
  images             String[]
  shortCaption      String
  description        String
  startDate          DateTime
  endDate            DateTime
  location            String
  coordinates        Coordinates? @relation(fields: [coordinatesId], references: [id])
  likes              Like[]       @relation("Like_listing")
  bookings           Booking[]     @relation("Booking_listing")
  coordinatesId     String?
  categories        Category[]  @relation(fields: [listingId], references: [id])
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

// Add a relation field to link Category and Listing models
model Category {
  id          String @id @unique
  listings    Listing[] @relation(fields: [listingId], references: [id])
  listingId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Like {
  id        String  @id @unique
  user      User    @relation("Like_user", fields: [userId], references: [id])
  userId    String
  listing   Listing @relation("Like_listing", fields: [listingId], references: [id])
  listingId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id        String  @id @unique
  user      User    @relation("Booking_user", fields: [userId], references: [id])
  userId    String
  listing   Listing @relation("Booking_listing", fields: [listingId], references: [id])
  listingId String
  request   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Search {
  id        String   @id @unique
  keyword   String
  timestamp DateTime @default(now())
  user      User?    @relation("Search_user", fields: [userId], references: [id])
  userId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Coordinates {
  id        String @id @unique
  latitude  Float
  longitude Float

  listings  Listing[] @relation
  listingId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
