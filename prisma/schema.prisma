generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id          Int @id @unique @default(autoincrement())
  firstName   String
  lastName    String
  email       String @unique
  username    String @unique
  password    String
  image       String?
  role       UserRole @default(NORMAL)

  listings  Listing[] @relation("Listing_user")
  bookings  Booking[] @relation("Booking_user")
  likes     Like[]    @relation("Like_user")
  searches  Search[]  @relation("Search_user")
}

enum UserRole {
  NORMAL
  ALPHA
}

model Category {
  id        Int @id @unique @default(autoincrement())
  name      String
  listings  Listing[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listing {
  id            Int @id @unique @default(autoincrement())
  name          String 
  host          User   @relation("Listing_user", fields: [hostId], references: [id])
  hostId        Int
  images        String[] 
  shortCaption  String 
  description   String 
  startDate     DateTime
  endDate       DateTime
  location      String 
  coordinates   Coordinates? @relation(fields: [coordinatesId], references: [id])
  likes         Like[]        @relation("Like_listing")
  bookings      Booking[]      @relation("Booking_listing")
  coordinatesId Int?
  categories    Category[] 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Like {
  id       Int @id @unique @default(autoincrement())
  user     User  @relation("Like_user", fields: [userId], references: [id])
  userId   Int
  listing  Listing @relation("Like_listing", fields: [listingId], references: [id])
  listingId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id       Int @id @unique @default(autoincrement())
  user     User  @relation("Booking_user", fields: [userId], references: [id])
  userId   Int
  listing  Listing @relation("Booking_listing", fields: [listingId], references: [id])
  listingId Int
  request   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Search {
  id       Int @id @unique @default(autoincrement())
  keyword  String
  timestamp DateTime @default(now())
  user     User?  @relation("Search_user", fields: [userId], references: [id])
  userId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coordinates {
  id        Int @id @unique @default(autoincrement())
  name      String
  latitude  Float
  longitude Float
  listingId Int
  listings  Listing[] @relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}